"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

#TODO: Arreglar mutation porq cambio la DB
type Mutation {
    createProject(
        id_parent: Int @rules(apply: ["integer"])
        name: String @rules(apply: ["required", "alpha", "max:255"])
        start_date: Date @rules(apply: ["required", "date", "before:tomorrow"])
        end_date: Date @rules(apply: ["required", "date", "after:tomorrow"])
        description: String @rules(apply: ["nullable", "string"])
        contract_value: Int @rules(apply: ["required"])
        expenses: Int @rules(apply: ["required", "integer"])
        process: Int @rules(apply: ["required", "integer"])
        state: String @rules(apply: ["required", "in:proceso,finalizado,archivado"])
    ): Project @create(model: "App\\Project")

    updateProject(
        id_project: ID! @rules(apply: ["required"])
        id_parent: Int @rules(apply: ["integer"])
        name: String @rules(apply: ["required", "alpha", "max:255"])
        start_date: Date @rules(apply: ["required", "date", "before:tomorrow"])
        end_date: Date @rules(apply: ["required", "date", "after:tomorrow"])
        description: String @rules(apply: ["nullable", "string"])
        contract_value: Int @rules(apply: ["required"])
        expenses: Int @rules(apply: ["required", "integer"])
        process: Int @rules(apply: ["required", "integer"])
        state: String @rules(apply: ["required", "in:proceso,finalizado,archivado"])
    ): Project @update(model: "App\\Project")

    deleteProject(
        id_project: ID! @rules(apply: ["required"])
    ): Project @delete(model: "App\\Project")
}

type Query {
    projects: [Project!]! @all(model: "App\\Project")
    projects_paginator: [Project]! @paginate(type: "paginator" model: "App\\Project")
    project(id_project: ID! @eq): Project @find(model: "App\\Project")
    users: [User!]! @all(model: "App\\User")
    me: User @middleware(checks:["auth:api"]) @auth
}

type Project {
    id_project: ID!
    id_parent: Int!
    name: String!
    start_date: Date!
    end_date: Date!
    description: String
    contract_value: Int!
    expenses: Int!
    process: Int!
    state: String
}

type User {
  id: ID!
  name: String!
  email: String!
}

