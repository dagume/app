"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    #prjects
    projects: [Project!]! @all(model: "App\\Project") @middleware(checks:["auth:api","permission:listar proyectos"])
    projects_paginator: [Project]! @paginate(type: "paginator" model: "App\\Project") @middleware(checks:["auth:api","permission:listar proyectos"])
    project(name: String! @eq): Project @find(model: "App\\Project") #@middleware(checks:["auth:api","permission:buscar proyecto"])
    #users
    users: [User!]! @all(model: "App\\User")
    user(name: String! @eq): User @find(model: "App\\User") @middleware(checks:["auth:api"])
    me: User @middleware(checks:["auth:api"]) @auth
    #roles y permissions
    roles: [Role!]! @all(model: "Spatie\\Permission\\Models\\Role") @middleware(checks:["auth:api"])
    permissions: [Permission!]! @all(model: "Spatie\\Permission\\Models\\Permission") @middleware(checks:["auth:api"])
    #Contacts
    #contacts: [Contact!]! @all(model: "App\\Contact") #@interface(resolver: "App\\GraphQL\\Interfaces\\Contact@resolveType") @middleware(checks:["auth:api","permission:listar contactos"])
    #contacts_paginator: [Contact]! @paginate(type: "paginator" model: "App\\Contact")# @middleware(checks:["auth:api","permission:listar contactos"])
    #contact(name: String! @eq): Contact @find(model: "App\\Contact")# @middleware(checks:["auth:api","permission:buscar contacto"])
    contacts: [Person!]! @all(model: "App\\Contact")
    contacts_paginator: [Person]! @paginate(type: "paginator" model: "App\\Contact")
    contact(name: String! @eq): Person @find(model: "App\\Contact")
    #Members
    members: [Member] @paginate(type: "paginator" model: "App\\Member")

}

type Member{
    id_members:ID!
    project:Project
    contact:Person
    rol:Role
    hours_week:Int
    hours_month:Int
    state:Int!
}

#tipos de contacto
enum contactType{
    persona @enum(value: 2)
    empresa @enum(value: 3)
}
enum contactIdType{
    cedula @enum(value: 1)
    nit @enum(value: 2)
    pasaporte @enum(value: 3)
    extranjera @enum(value: 4)
}
#interface Contact{
#    id_contact:ID!
#    type:contactType!
#    name:String!
#    identification_type:contactIdType!
#    identification_number:Int!
#    email:String!
#    phones:String!
#    state:Int!
#    address:String
#    web_site:String
#}

type Person{ #implements Contact
    id_contact:ID!
    id_parent_contact:Int
    id_job:Int
    type:contactType!
    name:String!
    lastname:String
    identification_type:contactIdType!
    identification_number:Int!
    email:String!
    phones:String!
    state:Int!
    address:String
    web_site:String
}

type Company{ #implements Contact
    id_contact:ID!
    type:contactType!
    name:String!
    identification_type:contactIdType!
    identification_number:Int!
    email:String!
    phones:String!
    state:Int!
    locate:String
    city:String
    address:String
    web_site:String
}

enum statesProject {
    proceso
    finalizado
    archivado
}
enum categoryProject {
    estudioSuelo @enum(value: 1)
    obraCivil @enum(value: 2)
}

type Project {
    id_project: ID!
    id_parent: categoryProject!
    name: String!
    start_date: Date!
    end_date: Date!
    description: String
    contract_value: Int!
    expenses: Int!
    process: Int!
    state: String
    members:Member
}

type Role {
  id: ID!
  name: String!
  guard_name: String!
  created_at: Date!
  updated_at: Date!
  permissions: [Permission]
}

type Permission {
  id: ID!
  name: String!
  guard_name: String!
  created_at: Date!
  updated_at: Date!
}

type User {
    id: ID!
  name: String!
  email: String!
  roles: [Role]
}

input LoginInput {
    username: String!
    password: String!
}

input RefreshTokenInput {
    refresh_token: String
}

type AuthPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
    user: User!
}

type RefreshTokenPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
}

type LogoutResponse {
    status: String!
    message: String
}

type ForgotPasswordResponse {
    status: String!
    message: String
}

input ForgotPasswordInput {
    email: String!
}

input NewPasswordWithCodeInput {
    email: String!
    token: String!
    password: String!
    password_confirmation: String!
}

#input ContactInput{
#    id_parent_contact: Int @rules(apply: ["integer"])
#    id_job: Int @rules(apply: ["integer"])
#    type: contactType @rules(apply: ["integer"])
#    name: String @rules(apply: ["required", "max:255"])
#    lastname: String @rules(apply: ["required", "max:255"])
#    identification_type: contactIdType @rules(apply: ["required"])
#    identification_number: Int @rules(apply: ["required"])
#    email: String @rules(apply: ["required", "max:255"])
#    phones:String @rules(apply: ["max:30"])
#    state:Int @rules(apply: ["required"])
#    locate:String @rules(apply: ["max:255"])
#    city:String @rules(apply: ["max:255"])
#    address:String @rules(apply: ["max:255"])
#    web_site:String @rules(apply: ["max:255"])
#}

type Mutation {
    #Auth
    login(data: LoginInput): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(data: RefreshTokenInput): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(data: ForgotPasswordInput!): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(data: NewPasswordWithCodeInput): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    #projects
    createProject(id_parent: categoryProject @rules(apply: ["integer"]) name: String @rules(apply: ["required", "alpha", "max:255"]) start_date: Date @rules(apply: ["required", "date", "before:tomorrow"]) end_date: Date @rules(apply: ["required", "date", "after:tomorrow"]) description: String @rules(apply: ["nullable", "string"]) contract_value: Int @rules(apply: ["required"]) expenses: Int @rules(apply: ["required", "integer"]) process: Int @rules(apply: ["required", "integer"]) state: String @rules(apply: ["required", "in:proceso,finalizado,archivado"])): Project @create(model: "App\\Project") @middleware(checks:["auth:api","permission:agregar proyecto"])
    updateProject(id_project: ID! @rules(apply: ["required"])id_parent: categoryProject @rules(apply: ["integer"])name: String @rules(apply: ["required", "alpha", "max:255"])start_date: Date @rules(apply: ["required", "date", "before:tomorrow"])end_date: Date @rules(apply: ["required", "date", "after:tomorrow"])description: String @rules(apply: ["nullable", "string"])contract_value: Int @rules(apply: ["required"])expenses: Int @rules(apply: ["required", "integer"])process: Int @rules(apply: ["required", "integer"])state: String @rules(apply: ["required", "in:proceso,finalizado,archivado"])): Project @update(model: "App\\Project") @middleware(checks:["auth:api","permission:editar proyecto"])
    updateStateProject(id_project: ID! @rules(apply: ["required"]) state: String @rules(apply: ["required", "in:proceso,finalizado,archivado"])): Project @update(model: "App\\Project") @middleware(checks:["auth:api","permission:cambiar estado proyecto"])
    #deleteProject(id_project: ID! @rules(apply: ["required"])): Project @delete(model: "App\\Project") @middleware(checks:["auth:api"])
    #Contacts
    #createContact(input: ContactInput!): Contact @create(model: "App\\Contact") #@middleware(checks:["auth:api","permission:agregar contacto"])
    #updateProject(id_project: ID! @rules(apply: ["required"])id_parent: Int @rules(apply: ["integer"])name: String @rules(apply: ["required", "alpha", "max:255"])start_date: Date @rules(apply: ["required", "date", "before:tomorrow"])end_date: Date @rules(apply: ["required", "date", "after:tomorrow"])description: String @rules(apply: ["nullable", "string"])contract_value: Int @rules(apply: ["required"])expenses: Int @rules(apply: ["required", "integer"])process: Int @rules(apply: ["required", "integer"])state: String @rules(apply: ["required", "in:proceso,finalizado,archivado"])): Project @update(model: "App\\Project") @middleware(checks:["auth:api","permission:editar proyecto"])
    #updateStateProject(id_project: ID! @rules(apply: ["required"]) state: String @rules(apply: ["required", "in:proceso,finalizado,archivado"])): Project @update(model: "App\\Project") @middleware(checks:["auth:api","permission:cambiar estado proyecto"])

    #Person
    createPerson(id_parent_contact: Int @rules(apply: ["integer"])id_job: Int @rules(apply: ["integer"])type: contactType @rules(apply: ["integer"])name: String @rules(apply: ["required", "max:255"])lastname: String @rules(apply: ["required", "max:255"])identification_type: contactIdType @rules(apply: ["integer"])identification_number: Int @rules(apply: ["required"])email: String @rules(apply: ["required", "max:255"])phones:String @rules(apply: ["max:30"])state:Int @rules(apply: ["required"])address:String @rules(apply: ["max:255"])web_site:String @rules(apply: ["max:255"])): Person @create(model: "App\\Contact")
    updatePerson(id_contact: ID! @rules(apply: ["required"])id_parent_contact: Int @rules(apply: ["integer"])id_job: Int @rules(apply: ["integer"])type: contactType @rules(apply: ["integer"])name: String @rules(apply: ["required", "max:255"])lastname: String @rules(apply: ["required", "max:255"])identification_type: contactIdType @rules(apply: ["integer"])identification_number: Int @rules(apply: ["required"])email: String @rules(apply: ["required", "max:255"])phones:String @rules(apply: ["max:30"])state:Int @rules(apply: ["required"])address:String @rules(apply: ["max:255"])web_site:String @rules(apply: ["max:255"])): Person @update(model: "App\\Contact")
    createCompany(type: contactType @rules(apply: ["integer"])name: String @rules(apply: ["required", "max:255"])identification_type: contactIdType @rules(apply: ["required"])identification_number: Int @rules(apply: ["required"])email: String @rules(apply: ["required", "max:255"])phones:String @rules(apply: ["max:30"])state:Int @rules(apply: ["required"])locate:String @rules(apply: ["max:255"])city:String @rules(apply: ["max:255"])address:String @rules(apply: ["max:255"])web_site:String @rules(apply: ["max:255"])): Company @create(model: "App\\Contact")
    updateCompany(id_contact: ID! @rules(apply: ["required"])type: contactType @rules(apply: ["integer"])name: String @rules(apply: ["required", "max:255"])identification_type: contactIdType @rules(apply: ["required"])identification_number: Int @rules(apply: ["required"])email: String @rules(apply: ["required", "max:255"])phones:String @rules(apply: ["max:30"])state:Int @rules(apply: ["required"])locate:String @rules(apply: ["max:255"])city:String @rules(apply: ["max:255"])address:String @rules(apply: ["max:255"])web_site:String @rules(apply: ["max:255"])): Company @update(model: "App\\Contact")
    #member
    member_has_project(
        id_project: Int! @rules(apply: ["integer"])
        id_contact: Int! @rules(apply: ["integer"])
        id_rol:     Int! @rules(apply: ["integer"])
        hours_week: Int  @rules(apply: ["integer"])
        hours_month:Int  @rules(apply: ["integer"])
        state:  Int = 1
        ):Member @create(model: "App\\Member")
}




